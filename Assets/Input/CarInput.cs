//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""21aa00a8-f1a5-4412-93ff-5039c252e5c8"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""23935ff5-bcfb-49dd-ace2-bd86e7386e9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""d3506223-6a00-4ea0-84ea-ce075a3bdeaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""01116937-6944-4734-9ab4-22ec5eb6ffcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""acceleration"",
                    ""id"": ""965ed002-6165-42b7-9627-2f5e1d2418ba"",
                    ""path"": ""1DAxis(minValue=-0.65)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bd15f1dd-e75f-4da9-aad4-95b03a5052a6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a97d6152-961d-4fc7-8fad-9362b2808db1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""513430c7-9f0d-4090-8716-90f5ba9314bd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""125c0ef2-04fe-4f0e-808a-a41be34404fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a67d16b7-e9f3-40d6-b744-4189972444f0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d21cd5fe-9766-4412-afd4-720de83121c3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Steer"",
                    ""id"": ""274d5c7c-8739-453c-8193-f6a857b5a5e2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""84d4b75c-97d7-471e-9ad8-b60376f80a90"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2cb599ef-323e-4ebf-aca9-e18021697d66"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e41aad17-72eb-4cca-abaa-0389e75cf0ee"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a6cc6c04-efd7-4172-884a-9719b4948ca0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a213d9cd-82e9-4152-99d9-d170e1cbd2b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CamControl"",
            ""id"": ""7791c7f6-11a7-458e-86fe-664d6283d2e9"",
            ""actions"": [
                {
                    ""name"": ""CamControl"",
                    ""type"": ""Button"",
                    ""id"": ""97a8a3de-f89a-401e-9ca6-8fada37b246c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52a2cfdf-4027-4a15-91ad-ffd92127ffdd"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Acceleration = m_Default.FindAction("Acceleration", throwIfNotFound: true);
        m_Default_Break = m_Default.FindAction("Break", throwIfNotFound: true);
        m_Default_Steering = m_Default.FindAction("Steering", throwIfNotFound: true);
        // CamControl
        m_CamControl = asset.FindActionMap("CamControl", throwIfNotFound: true);
        m_CamControl_CamControl = m_CamControl.FindAction("CamControl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Acceleration;
    private readonly InputAction m_Default_Break;
    private readonly InputAction m_Default_Steering;
    public struct DefaultActions
    {
        private @CarInput m_Wrapper;
        public DefaultActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Acceleration => m_Wrapper.m_Default_Acceleration;
        public InputAction @Break => m_Wrapper.m_Default_Break;
        public InputAction @Steering => m_Wrapper.m_Default_Steering;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Acceleration.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAcceleration;
                @Break.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBreak;
                @Steering.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteering;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // CamControl
    private readonly InputActionMap m_CamControl;
    private ICamControlActions m_CamControlActionsCallbackInterface;
    private readonly InputAction m_CamControl_CamControl;
    public struct CamControlActions
    {
        private @CarInput m_Wrapper;
        public CamControlActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamControl => m_Wrapper.m_CamControl_CamControl;
        public InputActionMap Get() { return m_Wrapper.m_CamControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CamControlActions set) { return set.Get(); }
        public void SetCallbacks(ICamControlActions instance)
        {
            if (m_Wrapper.m_CamControlActionsCallbackInterface != null)
            {
                @CamControl.started -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
                @CamControl.performed -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
                @CamControl.canceled -= m_Wrapper.m_CamControlActionsCallbackInterface.OnCamControl;
            }
            m_Wrapper.m_CamControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CamControl.started += instance.OnCamControl;
                @CamControl.performed += instance.OnCamControl;
                @CamControl.canceled += instance.OnCamControl;
            }
        }
    }
    public CamControlActions @CamControl => new CamControlActions(this);
    public interface IDefaultActions
    {
        void OnAcceleration(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
    }
    public interface ICamControlActions
    {
        void OnCamControl(InputAction.CallbackContext context);
    }
}
